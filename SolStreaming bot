import os, sys, time, json, asyncio, logging
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from dotenv import load_dotenv
from telegram import Bot
import websockets

load_dotenv()
logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
SOLSTREAM_KEY = os.getenv("SOLSTREAM_API_KEY")

if not SOLSTREAM_KEY or not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    logging.critical("‚ùå ENV vars missing!")
    sys.exit(1)

bot = Bot(token=TELEGRAM_TOKEN)

async def subscribe_and_listen():
    uri = "wss://api.solanastreaming.com/"
    headers = {"X-API-KEY": SOLSTREAM_KEY}
    async with websockets.connect(uri, extra_headers=headers) as ws:
        await ws.send(json.dumps({"id":1,"method":"newPairSubscribe"}))
        logging.info("‚úÖ Subscribed to newPair events")
        while True:
            msg = await ws.recv()
            data = json.loads(msg)
            yield data

def send(alert):
    bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=alert)
    logging.info("üì§ Telegram alert sent")

def log_sheet(row):
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/etc/secrets/GOOGLE_CREDS_JSON", 
            ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"])
        sheet = gspread.authorize(creds).open("Sol Sniper Logs").sheet1
        sheet.append_row(row)
    except Exception as e:
        logging.error("‚ùå Sheets error: %s", e)

def build_alert(pair):
    base = pair["baseToken"]["info"]
    quote_added = float(pair["quoteTokenLiquidityAdded"])/1e9
    base_added = float(pair["baseTokenLiquidityAdded"])/10**base["decimals"]
    alert = (
        f"üöÄ New Pair Created!\n"
        f"Name: {base['metadata']['name']} ({base['metadata']['symbol']})\n"
        f"LIQ Added: {quote_added:,.2f} wSOL\n"
        f"Pair Info URL: https://solanastreaming.com/pair/{pair['ammAccount']}"
    )
    return alert

async def main():
    logging.info("üõ∏ SolStreaming bot is starting...")
    send("‚úÖ SolStreaming bot started ‚Äî listening for new pairs on Raydium")
    async for data in subscribe_and_listen():
        pair = data.get("pair")
        if not pair: continue
        alert = build_alert(pair)
        send(alert)
        log_sheet([datetime.utcnow().isoformat(), pair["baseToken"]["info"]["symbol"], pair["ammAccount"], data["slot"]])

if __name__ == "__main__":
    asyncio.run(main())
